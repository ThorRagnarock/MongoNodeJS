from shoppingList.js:



 /***  REMEMBER TO RETHINK THE TOGGLE OF THE BOOL */
 
//first go into the listing itself and grab it's _id
//than go back to the listing document(header doc)
//than remnove that id off of the array inside the listing heading
//than remove the
// NO NO NO wait, that's just the list.. so you just need to remove the list itself..
// that means the entire collection




	// static async ParamToggle(collection, itemId, paramName, userID) { //pinned/archivedStatus toggle
	// 	const filter = { _id: new ObjectId(itemId) };
	// 	const doc = await this.FindOne(collection, filter);
	// 	const paramValue = doc[paramName]

	// 	const turnedValue = !paramValue;
	// 	let data = { $set: { [paramName]: turnedValue } };


	// 	if (paramName == "pinned") {
	// 		let pinnedQuery = { "pinned": true, "userID": userID };
	// 		let pinnedCount = await new DB().CountDocs(collection, pinnedQuery);
	// 		if (pinnedCount < 3 && !paramValue) {
	// 			return await new DB().UpdateById(collection, itemId, data)
	// 		} else {
	// 			return { status: 'failed', message: 'ניתן לנעוץ עד 3 צ׳אטים בלבד' }
	// 		}
	// 	}
	// 	return await new DB().UpdateById(collection, itemId, data);
	// }


	from shoppingList.route.js:


//TODO: create a function that concatenate object to form a list
//TODO: create a function that removes objects from a list

//AS I AM WORKING ON THIS I AM NOT SURE IF IT's ANY RELEVANT AT THIS POINT IN TIME BECAUSE THIS IS NESTED AS AN OBJECT IN AN ARRAY OF OBJECTS within the user


// ShoppinglistRoute.put('/api/shoppingList/paramToggle/:itemId', async (req, res) => {
// 	try {
// 		let { itemId } = req.params.itemId;
// 		let {paramName, userID, collectionName} = req.body;
// 		let data = await toggleParam(collectionName, itemId, paramName, userID);
// 		res.status(200).json(data);
// 	} catch (error) {
// 		res.status(500).json({error})
// 	}
// })



from Groceries.js:



//THATS NO LONGER RELEVANT. the mechanics works different now
// static async GetRelationGroceries(colorCode, conditionFilter) {
// 	let query = {
// 		"colorCode": colorCode,
// 		"conditionFilter": conditionFilter
// 	}
// 	let packagingSection = await new DB().FindAll('groceries', { "colorCode": colorCode });
// 	packagingSection = packagingSection[0];
// 	const filteredGroceries = packagingSection.product.filter(product => {
// 		return conditionFilter ? !product.startsWith('!') : product.startsWith('!');
// 	})
// 	return { product: filteredGroceries };//...packagingSection, 
// }

// //that might be redandant
	// static async InitIndexCount() {
	// 	try {
	// 		const fetchLastId = await new DB().FindOne('groceries', {}, { sort: { _id: -1 } });
	// 		if (fetchLastId && fetchLastId._id) { Groceries.indexIdCounter = fetchLastId._id }
	// 		else { Groceries.indexIdCounter = 0; }
	// 	} catch (error) {
	// 		console.error(error);
	// 	}
	// }// MAYBE I HAVE TO RETHINK IT....


	// console.log("\n\n-=Hello GROCERIES 5=-\n\n");



from db.js:


//"mongodb://localhost:27017"; //


	//async AppendListItem()


	//DONE : create a function that concatenate object to form a list // I am not sure if I have a need for that anymore... (both in the list and both in the item level)
	//DONE: create a function that removes objects from a list (both in the list and both in the item level)
	//DONE? create an function that is cross-referncing from 6 different (I am pretty sure I got that one with agg)

	//DONE: Create a listing header





MORE AUX 
static async pinLogic(paramName, turnedValue, userID) {
		if (paramName.paramName === 'pinned') {
			let pinnedQuery = { "pinned": true, "userID": userID };
			let pinnedCount = await new DB().CountDocs(collection, pinnedQuery);
			if (pinnedCount >= 3 && turnedValue) {
				return { status: 'failed', message: 'ניתן לנעוץ עד 3 רשימות בלבד' };
			}
		}
		return null;
	};